{"version":3,"sources":["functions.js","application.js","settings.js","home.js","home_controller.js","api.js","auth.js","http_interceptor.js"],"names":["w","a","encrypt","m","k","element","document","injector","get","e","CryptoJS","AES","toString","decrypt","d","enc","Utf8","window","angular","application","module","config","$httpProvider","defaults","headers","common","Content-Type","post","put","delete","interceptors","push","$mdThemingProvider","alwaysWatchTheme","theme","primaryPalette","accentPalette","default","$translateProvider","useSanitizeValueStrategy","preferredLanguage","$locationProvider","$routeProvider","html5Mode","hashPrefix","otherwise","redirectTo","factory","settings","when","controller","templateUrl","resolve","isGuest","Auth","$mdSidenav","$scope","close","menu","open","query","username","reset","$","Settings","api","endpoint","host","concat","$http","$location","$q","$window","API","auth","forget","deferred","defer","localStorage","removeItem","path","promise","handler","response","expires_in","data","access_token","refresh_token","token_type","id","hasOwnProperty","fromJson","isLogged","then","reject","refresh","grant_type","user_id","user_secret","scope","scopes","join","session","console","info","toJson","type","verify","credentials","password","$injector","$translate","refreshPromise","httpInterceptor","request","Authorization","responseError","rejection","error","status","text","$mdToast","toast","simple","content","position","show","message"],"mappings":"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","file":"application.min.js","sourcesContent":["(function(w, a)\r\n{\r\n    w.encrypt = function(m, k)\r\n    {\r\n        k = typeof k === 'undefined' ? a.element(document).injector().get('secret') : k;\r\n        var e = w.CryptoJS.AES.encrypt(m, k);\r\n        return e.toString();\r\n    };\r\n\r\n    w.decrypt = function(m, k)\r\n    {\r\n        k = typeof k === 'undefined' ? a.element(document).injector().get('secret') : k;\r\n        var d = w.CryptoJS.AES.decrypt(m, k);\r\n        return d.toString(w.CryptoJS.enc.Utf8);\r\n    };\r\n})(window, angular);\r\n","var application = angular.module('application', [\r\n    'm',\r\n    'ngAnimate',\r\n    'ngAria',\r\n    'ngMaterial',\r\n    'ngMessageFormat',\r\n    'ngMessages',\r\n    'ngResource',\r\n    'ngRoute',\r\n    'ngSanitize',\r\n    'pascalprecht.translate', // angular-translate\r\n    'application.templates', // application templates cache\r\n]);\r\n\r\napplication.config(['$httpProvider',\r\n    function($httpProvider)\r\n    {\r\n        $httpProvider.defaults.headers = {\r\n            common: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            post: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            put: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            delete: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        };\r\n\r\n        $httpProvider.interceptors.push('HttpInterceptor');\r\n    }]);\r\n\r\napplication.config(['$mdThemingProvider',\r\n    function($mdThemingProvider)\r\n    {\r\n        $mdThemingProvider.alwaysWatchTheme(true);\r\n        \r\n        $mdThemingProvider.theme('cyan')\r\n            .primaryPalette('cyan')\r\n            .accentPalette('indigo');\r\n            \r\n        $mdThemingProvider.theme('deep-purple')\r\n            .primaryPalette('deep-purple')\r\n            .accentPalette('indigo');\r\n            \r\n        $mdThemingProvider.theme('green')\r\n            .primaryPalette('green')\r\n            .accentPalette('indigo');\r\n            \r\n        $mdThemingProvider.theme('light-green')\r\n            .primaryPalette('light-green')\r\n            .accentPalette('indigo');\r\n            \r\n        $mdThemingProvider.theme('purple')\r\n            .primaryPalette('purple')\r\n            .accentPalette('indigo');\r\n            \r\n        $mdThemingProvider.theme('pink')\r\n            .primaryPalette('pink')\r\n            .accentPalette('indigo');\r\n\r\n        $mdThemingProvider.theme('red')\r\n            .primaryPalette('red')\r\n            .accentPalette('indigo');\r\n\r\n        $mdThemingProvider.theme('teal')\r\n            .primaryPalette('teal')\r\n            .accentPalette('indigo');\r\n            \r\n        $mdThemingProvider.theme('grey')\r\n            .primaryPalette('grey', {\r\n                default: '200',\r\n            })\r\n            .accentPalette('blue');\r\n\r\n        $mdThemingProvider.theme('white')\r\n            .primaryPalette('grey', {\r\n                default: '200',\r\n            })\r\n            .accentPalette('blue');\r\n    }]);\r\n\r\napplication.config(['$translateProvider',\r\n    function($translateProvider)\r\n    {\r\n        $translateProvider.useSanitizeValueStrategy('sanitize');\r\n        $translateProvider.preferredLanguage('en');\r\n    }]);\r\n\r\napplication.config(['$locationProvider', '$routeProvider',\r\n    function($locationProvider, $routeProvider)\r\n    {\r\n        $locationProvider.html5Mode(true)\r\n            .hashPrefix('!#');\r\n\r\n        $routeProvider.otherwise({\r\n                redirectTo: '/home',\r\n            });\r\n    }]);\r\n","application.factory('Settings',\r\n    function()\r\n    {\r\n        var settings = {};\r\n        return settings;\r\n    });\r\n","application.config(['$routeProvider',\r\n    function($routeProvider)\r\n    {\r\n        $routeProvider\r\n            .when('/home', {\r\n                controller: 'HomeController',\r\n                templateUrl: 'home.html',\r\n                resolve: {\r\n                    isGuest: ['Auth', function(Auth)\r\n                    {\r\n                        return Auth.isGuest();\r\n                    }],\r\n                },\r\n            });\r\n    }]);\r\n","application.controller('HomeController', ['$mdSidenav', '$scope',\r\n    function($mdSidenav, $scope)\r\n    {\r\n        $scope.theme = 'teal';\r\n\r\n        $scope.close = function()\r\n        {\r\n            $mdSidenav('menu').close();\r\n        };\r\n\r\n        $scope.menu = function()\r\n        {\r\n            $mdSidenav('menu').open();\r\n        };\r\n\r\n        $scope.query = {\r\n            username: '',\r\n        };\r\n\r\n        $scope.reset = function()\r\n        {\r\n            $scope.query.$ = '';\r\n        };\r\n    }]);","application.factory('API', ['Settings',\r\n    function(Settings)\r\n    {\r\n        var api = {};\r\n\r\n        //api.access_token    = '/api/access_token';\r\n        //api.session         = '/api/session';\r\n        //api.users           = '/api/users/:user_id';\r\n        \r\n        api.get = function(endpoint)\r\n        {\r\n            return Settings.host.concat(api[endpoint]);\r\n        };\r\n\r\n        return api;\r\n    }]);\r\n","application.factory('Auth', ['$http', '$location', '$q', '$window', 'API', 'Settings',\r\n    function($http, $location, $q, $window, API, Settings)\r\n    {\r\n        var auth = {};\r\n\r\n        auth.forget = function()\r\n        {\r\n            var deferred = $q.defer();\r\n\r\n            $window.localStorage.removeItem('expires_in');\r\n            $window.localStorage.removeItem('access_token');\r\n            $window.localStorage.removeItem('refresh_token');\r\n            $window.localStorage.removeItem('token_type');\r\n            $window.localStorage.removeItem('id');\r\n            $window.localStorage.removeItem('type');\r\n            $window.localStorage.removeItem('scopes');\r\n            $location.path('/login');\r\n\r\n            deferred.resolve();\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        auth.handler = function(response)\r\n        {\r\n            $window.localStorage.expires_in      = response.data.expires_in;\r\n            $window.localStorage.access_token    = response.data.access_token;\r\n            $window.localStorage.refresh_token   = response.data.refresh_token;\r\n            $window.localStorage.token_type      = response.data.token_type;\r\n            return response;\r\n        };\r\n\r\n        auth.id = function()\r\n        {\r\n            if (!$window.localStorage.hasOwnProperty('id')) {\r\n                return false;\r\n            }\r\n\r\n            return angular.fromJson($window.localStorage.id);\r\n        };\r\n\r\n        auth.isGuest = function()\r\n        {\r\n            var deferred = $q.defer();\r\n\r\n            auth.isLogged()\r\n                .then(function()\r\n                {\r\n                    deferred.reject('auth.is_guest');\r\n                })\r\n                .catch(function()\r\n                {\r\n                    deferred.resolve(true);\r\n                });\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        auth.isLogged = function()\r\n        {\r\n            var deferred = $q.defer();\r\n\r\n            if ($window.localStorage.hasOwnProperty('expires_in') &&\r\n                $window.localStorage.hasOwnProperty('access_token') &&\r\n                $window.localStorage.hasOwnProperty('refresh_token') &&\r\n                $window.localStorage.hasOwnProperty('token_type')) {\r\n                deferred.resolve(true);\r\n            } else {\r\n                deferred.reject('auth.is_logged');\r\n            }\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        auth.refresh = function()\r\n        {\r\n            var data = {\r\n                grant_type: 'refresh_token',\r\n                user_id: Settings.user_id,\r\n                user_secret: Settings.user_secret,\r\n                scope: Settings.scopes.join(),\r\n                refresh_token: $window.localStorage.refresh_token,\r\n            };\r\n\r\n            return $http.post(API.get('access_token'), data)\r\n                .then(auth.handler);\r\n        };\r\n\r\n        auth.scopes = function()\r\n        {\r\n            if (!$window.localStorage.hasOwnProperty('scopes')) {\r\n                return false;\r\n            }\r\n\r\n            return angular.fromJson($window.localStorage.scopes);\r\n        };\r\n\r\n        auth.session = function()\r\n        {\r\n            return $http.get(API.get('session'))\r\n                .then(function(session)\r\n                {\r\n                    console.info(session);\r\n                    $window.localStorage.id = angular.toJson(session.data.id);\r\n                    $window.localStorage.type = angular.toJson(session.data.type);\r\n                    $window.localStorage.scopes = angular.toJson(session.data.scopes);\r\n                });\r\n        };\r\n\r\n        auth.type = function()\r\n        {\r\n            if (!$window.localStorage.hasOwnProperty('type')) {\r\n                return false;\r\n            }\r\n\r\n            return angular.fromJson($window.localStorage.type);\r\n        };\r\n\r\n        auth.verify = function(credentials)\r\n        {\r\n            var data = {\r\n                grant_type: 'password',\r\n                user_id: Settings.user_id,\r\n                user_secret: Settings.user_secret,\r\n                scope: Settings.scopes.join(),\r\n                username: credentials['username'],\r\n                password: credentials['password'],\r\n            };\r\n\r\n            return $http.post(API.get('access_token'), data)\r\n                .then(auth.handler);\r\n        };\r\n\r\n        return auth;\r\n    }]);\r\n\r\n","application.factory('HttpInterceptor', ['$injector', '$q', '$translate', '$window',\r\n    function($injector, $q, $translate, $window)\r\n    {\r\n        var refreshPromise = null;\r\n\r\n        var httpInterceptor = {};\r\n\r\n        httpInterceptor.request = function(config)\r\n        {\r\n            if ($injector.get('Auth').isLogged()) {\r\n                var token_type = $window.localStorage.token_type;\r\n                var access_token = $window.localStorage.access_token;\r\n                config.headers.Authorization = token_type + ' ' + access_token;\r\n            }\r\n\r\n            return config;\r\n        };\r\n\r\n        httpInterceptor.responseError = function(rejection)\r\n        {\r\n            console.error(rejection);\r\n\r\n            switch (rejection.status) {\r\n                case 401:\r\n                    refreshPromise = refreshPromise ? refreshPromise :\r\n                        $injector.get('Auth').refresh();\r\n\r\n                    return refreshPromise.finally(function()\r\n                        {\r\n                            refreshPromise = null;\r\n                        })\r\n                        .then(function()\r\n                        {\r\n                            return $injector.get('$http')(rejection.config);\r\n                        });\r\n\r\n                case 405:\r\n                    $translate('toast_method_not_allowed')\r\n                        .then(function(text)\r\n                        {\r\n                            var $mdToast = $injector.get('$mdToast');\r\n                            var toast = $mdToast.simple()\r\n                                .content(text)\r\n                                .position('bottom left right');\r\n                            $mdToast.show(toast);\r\n                        });\r\n\r\n                    return $q.reject(rejection);\r\n\r\n                case 422:\r\n                    $translate('toast_validation_failed')\r\n                        .then(function(text)\r\n                        {\r\n                            var $mdToast = $injector.get('$mdToast');\r\n                            var toast = $mdToast.simple()\r\n                                .content(text)\r\n                                .position('bottom left right');\r\n                            $mdToast.show(toast);\r\n                        });\r\n\r\n                    return $q.reject(rejection);\r\n\r\n                case 500:\r\n                    if (rejection.data.message == 'The user credentials were incorrect.') {\r\n                        $translate('toast_incorrect_credentials')\r\n                            .then(function(text)\r\n                            {\r\n                                var $mdToast = $injector.get('$mdToast');\r\n                                var toast = $mdToast.simple()\r\n                                    .content(text)\r\n                                    .position('bottom left right');\r\n                                $mdToast.show(toast);\r\n                            });\r\n\r\n                        return $q.reject(rejection);\r\n                    }\r\n\r\n                    if (rejection.data.message == 'The refresh token is invalid.') {\r\n                        $translate('toast_invalid_refresh_token')\r\n                            .then(function(text)\r\n                            {\r\n                                var $mdToast = $injector.get('$mdToast');\r\n                                var toast = $mdToast.simple()\r\n                                    .content(text)\r\n                                    .position('bottom left right');\r\n                                $mdToast.show(toast);\r\n                            });\r\n                    }\r\n\r\n                    $injector.get('Auth')\r\n                        .forget();\r\n\r\n                    return $q.reject(rejection);\r\n            }\r\n        };\r\n\r\n        return httpInterceptor;\r\n    }]);\r\n"],"sourceRoot":"/source/"}